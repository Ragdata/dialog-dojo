#!/usr/bin/env bash

# ==================================================================
# dojo
# ==================================================================
# Dialog Dojo Installer
#
# File:         dojo
# Author:       Ragdata
# Date:         14/09/2023
# License:      MIT License
# Copyright:    Copyright © 2023 Darren (Ragdata) Poulton
# ==================================================================
# PREFLIGHT
# ==================================================================
# set debug mode = false
declare -gx DOJO_DEBUG=0
# if script is called with 'debug' as an argument, then set debug mode
if [[ "${1,,}" == "debug" ]]; then shift; DOJO_DEBUG=1; set -- "${@}"; set -axeET; else set -aeET; fi
# ==================================================================
# VARIABLES
# ==================================================================
#
# PACKAGE VERSION
#
declare -gx DOJO_VERSION="0.1.0"
declare -gx DOJO_BUILD="1001"
declare -gx DOJO_BUILD_DATE="20230818:0426"
#
# ANSI VARIABLES
#
declare -gx ANSI_ESC=$'\033'
declare -gx ANSI_CSI="${ANSI_ESC}["
#
# COLOR VARIABLES
#
declare -gx RED="$(printf '%s31m' "$ANSI_CSI")"
declare -gx BLUE="$(printf '%s94m' "$ANSI_CSI")"
declare -gx GREEN="$(printf '%s32m' "$ANSI_CSI")"
declare -gx GOLD="$(printf '%s33m' "$ANSI_CSI")"
declare -gx WHITE="$(printf '%s97m' "$ANSI_CSI")"
declare -gx RESET="$(printf '%s0m' "$ANSI_CSI")"
#
# SYMBOLS
#
[[ -z "${SYMBOL_ERROR}" ]] && declare -gx SYMBOL_ERROR="🚫"
[[ -z "${SYMBOL_WARNING}" ]] && declare -gx SYMBOL_WARNING="⚠️"
[[ -z "${SYMBOL_INFO}" ]] && declare -gx SYMBOL_INFO="ℹ️"
[[ -z "${SYMBOL_SUCCESS}" ]] && declare -gx SYMBOL_SUCCESS="✅"
#
# MISC
#
declare -gx isOPT='^(-([A-Za-z]+)[\s]?([A-Za-z0-9_\.]*))$|^(--(([A-Za-z0-9_\.]+)=?([A-Za-z0-9_\.]*)))$'
# ==================================================================
# FUNCTIONS
# ==================================================================
# ------------------------------------------------------------------
# echoAlias
# ------------------------------------------------------------------
# @description Master alias function for `echo` command
#
# @arg  $1			[string]        String to be rendered
# @arg  -c="$VAR"   [option]        Color alias as defined above 				(required)
# @arg  -p='string' [option]        String to prefix to $1 						(optional)
# @arg  -s='string' [option]        String to suffix to $1 						(optional)
# @arg  -e          [option]        Enable escape codes 						(optional)
# @arg  -n          [option]        Disable newline at end of rendered string 	(optional)
#
# @exitcode     0   Success
# @exitcode     1   Failure
# @exitcode     2   ERROR - Requires Argument
# @exitcode     3   ERROR - Invalid Argument
# ------------------------------------------------------------------
dojo::echoAlias()
{
    local msg="${1:-}"
    local COLOR=""
    local OUTPUT=""
    local PREFIX=""
    local SUFFIX=""
    local _0=""
    local STREAM=1
    local -a OUTARGS

    shift

    [[ -z "$msg" ]] && { echo "${RED}${SYMBOL_ERROR} ERROR :: dojo::echoAlias :: Requires Argument!${RESET}"; return 2; }

    options=$(getopt -l "color:,prefix:,suffix:,escape,noline" -o "c:p:s:en" -a -- "$@")

    eval set --"$options"

    while true
    do
        case "$1" in
            -c|--color)
                COLOR="$2"
                shift 2
                ;;
            -p|--prefix)
                PREFIX="$2"
                shift 2
                ;;
            -s|--suffix)
                SUFFIX="$2"
                shift 2
                ;;
            -e|--escape)
                OUTARGS+=("-e")
                shift
                ;;
            -n|--noline)
                OUTARGS+=("-n")
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "${RED}ERROR :: echoAlias ::Invalid Argument '$1'!${RESET}"
                return 1
                ;;
        esac
    done

    [[ -n "$COLOR" ]] && _0="${RESET}" || _0=""

    OUTPUT="${COLOR}${PREFIX}${msg}${SUFFIX}${_0}"

    [[ "$STREAM" -eq 2 ]] && echo "${OUTARGS[@]}" "${OUTPUT}" >&2 || echo "${OUTARGS[@]}" "${OUTPUT}"

#    return 0
}
#
# COLOUR ALIASES
#
echoRed() { dojo::echoAlias "$1" -c "${RED}" "${@:2}"; }
echoBlue() { dojo::echoAlias "$1" -c "${BLUE}" "${@:2}"; }
echoGreen() { dojo::echoAlias "$1" -c "${GREEN}" "${@:2}"; }
echoGold() { dojo::echoAlias "$1" -c "${GOLD}" "${@:2}"; }
echoWhite() { dojo::echoAlias "$1" -c "${WHITE}" "${@:2}"; }
#
# MESSAGE ALIASES
#
echoError() { dojo::echoAlias "$SYMBOL_ERROR $1" -e -c "${RED}" "${@:2}"; }
echoWarning() { dojo::echoAlias "$SYMBOL_WARNING $1" -e -c "${GOLD}" "${@:2}"; }
echoInfo() { dojo::echoAlias "$SYMBOL_INFO $1" -c "${BLUE}" "${@:2}"; }
echoSuccess() { dojo::echoAlias "$SYMBOL_SUCCESS $1" -c "${GREEN}" "${@:2}"; }
errorReturn() { echoError "$1"; return "${2:-1}"; }
#
# EXIT ALIASES
#
exitReturn() { local r="${1:-0}"; [[ "${BASH_SOURCE[0]}" != "${0}" ]] && return "$r" || exit "$r"; }
errorExitReturn() { echoError "$1"; exitReturn "${2:-1}"; }
# ------------------------------------------------------------------
# scriptPath
# ------------------------------------------------------------------
# @description Determine the calling script's current path
#
# @noargs
#
# @stdout The calling script's current path
# ------------------------------------------------------------------
scriptPath() { printf '%s' "$(realpath "${BASH_SOURCE[0]}")"; }
# ------------------------------------------------------------------
# scriptDir
# ------------------------------------------------------------------
# @description Determine the calling script's current directory
#
# @noargs
#
# @stdout The calling script's current directory
# ------------------------------------------------------------------
scriptDir() { printf '%s' "$(dirname "$(realpath "${BASH_SOURCE[0]}")")"; }
# ------------------------------------------------------------------
# dojo::theme
# ------------------------------------------------------------------
dojo::theme()
{
	local retval=0
	local RESULT theme
	local DIALOG_BACKTITLE="DIALOG DOJO"
	local DIALOG_TITLE="THEME INSTALLER"
	local DIALOG_TEXT="Select a theme:"
	local MENU_HEIGHT=7
	local -a DIALOG_OPTIONS=(
		"1" "Debian"
		"2" "Redeyed"
		"3" "Slackware"
		"4" "Sourcemage"
		"5" "SUSE"
		"6" "Whiptail"
	)

	. /usr/local/lib/dd/dft-std

	while [[ "$retval" -ne 1 ]] && [[ "$retval" -ne 254 ]]
	do
		RESULT=$(dialog "${DIALOG_OPTS}" \
			--menu "${DIALOG_TEXT}" "${HEIGHT:-15}" "${WIDTH:-50}" "${MENU_HEIGHT:-5}" \
			"${DIALOG_OPTIONS[@]}" 3>&1 1>&2 2>&3)

		retval=$?

		case "$retval" in
			"$DIALOG_OK")
				case "$RESULT" in
					1) theme=".debianrc";;
					2) theme=".redeyedrc";;
					3) theme=".slackwarerc";;
					4) theme=".sourcemagerc";;
					5) theme=".suserc";;
					6) theme=".whiptailrc";;
				esac
				;;
			"$DIALOG_CANCEL")
				dialog --clear --yesno "Really Quit?" 10 30
				case "$?" in
					"$DIALOG_OK")
						return 0
						;;
					"$DIALOG_CANCEL")
						retval=99
						;;
					"$DIALOG_ESC")
						return 1
						;;
				esac
				;;
			"$DIALOG_ESC")
				return 1
				;;
		esac
	done

	clear

	if [[ -f /opt/dd/cfg/"$theme" ]]; then
		[[ -f "$HOME"/.dialogrc ]] && rm -f "$HOME"/.dialogrc
		sudo cp /opt/dd/cfg/"$theme" "$HOME"/.dialogrc
		echoSuccess "DONE!"
	else
		errorReturn "Theme '$theme' Not Found!"
	fi
}
# ------------------------------------------------------------------
# dojo::usage
# ------------------------------------------------------------------
dojo::usage()
{
	echo
	echoGold "===================================================================="
	echoWhite "USAGE: dojo <command> <option>"
	echoGold "===================================================================="
	echo
	echo "COMMANDS:"
	echo "    theme                 - Set dialog theme for current user"
	echo
	echoGold "===================================================================="
	echo
	echo "OPTIONS:"
	echo "    -h, --help            - Show this information"
	echo "    -v, --version         - Show short version information"
	echo "    -v, --version verbose - Show verbose version information"
	echo
	echoGold "===================================================================="
	echo
}
# ------------------------------------------------------------------
# dojo::version
# ------------------------------------------------------------------
# @description Reports the version and build date of this release
#
# @noargs
#
# @stdout Version, Copyright, & Build Information
# ------------------------------------------------------------------
dojo::version()
{
	local verbosity="${1:-}"

	if [[ -z "$verbosity" ]]; then
		echo "${DOJO_VERSION}"
	else
		echo
		echo "Dialog Dojo"
		echoWhite "Dialog Dojo ${DOJO_VERSION}"
		echo "Copyright © 2022-2023 Darren (Ragdata) Poulton"
		echo "Build: ${DOJO_BUILD}"
		echo "Build Date: ${DOJO_BUILD_DATE}"
		echo
	fi
}
# ==================================================================
# MAIN
# ==================================================================
if [[ -n "$1" ]] && [[ ! "$1" =~ $isOPT ]]; then
	case "${1,,}" in
		theme)
			shift
			dojo::theme "$@"
			exit 0
			;;
		*)  echo "ERROR :: Invalid Option";;
	esac
fi

options=$(getopt -l "help,version::" -o "hv::" -a -- "$@")

eval set --"$options"

while true
do
	case "$1" in
		-h|--help)
			shift
			dojo::usage
			exit 0
			;;
		-v|--version)
			if [[ -n "${2}" ]]; then
				dojo::version "${2}"
				shift 2
			else
				dojo::version
				shift
			fi
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			echoError "Invalid Argument!"
			exit 2
			;;
	esac
done
